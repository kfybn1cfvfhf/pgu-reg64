package com.nvision.pgu.web.services.s36400053;

import com.nvision.pgu.core.annotations.InitRule;
import com.nvision.pgu.core.util.FileBean;
import ru.lanit.samara.pgu.core.forms.blocks.AbstractServiceOrderForm;
import ru.lanit.samara.pgu.core.rules.InitRulePersonalDataStrategy;
import ru.lanit.samara.pgu.core.util.IPrivateRoomDataContainer;
import com.nvision.pgu.core.converters.AccessCounterList;

import java.util.List;
import java.util.Date;
/**
 * @author aleksisha
 *         Date: Oct 3, 2010
 *         Time: 7:21:39 PM
 */
public class Service36400053Form extends AbstractServiceOrderForm {


    public void clearApplicantAttributes() {

        this.setLastName("");
        this.setFirstName("");
        this.setMiddleName("");
        this.setPhone("");
        this.setEmail("");
        this.setIdentityDocType("");
        this.setOtherDocTypeName("");
        this.setPassDate(null);
        this.setPassFrom("");
        this.setPassNo("");
        this.setPassSeria("");
    }

    public void fillApplicantAttributesWithPrivateRoomData(IPrivateRoomDataContainer privateRoomDataContainer) {

        this.setLastName(privateRoomDataContainer.getLastName());
        this.setFirstName(privateRoomDataContainer.getFirstName());
        this.setMiddleName(privateRoomDataContainer.getMiddleName());
        this.setPhone(privateRoomDataContainer.getPhone());
        this.setEmail(privateRoomDataContainer.getEmail());
        this.setIdentityDocType("");
        this.setOtherDocTypeName("");
        this.setPassDate(null);
        this.setPassFrom("");
        this.setPassNo("");
        this.setPassSeria("");

        this.setAddressIndex(privateRoomDataContainer.getAddressIndex());
        this.setAddressRegion(privateRoomDataContainer.getAddressRegion());
        this.setAddressRayon(privateRoomDataContainer.getAddressRayon());
        this.setAddressCity(privateRoomDataContainer.getAddressCity());
        this.setAddressSettlementText(privateRoomDataContainer.getAddressSettlementText());
        this.setAddressSettlementDict(privateRoomDataContainer.getAddressSettlementDict());
        this.setAddressStreetText(privateRoomDataContainer.getAddressStreetText());
        this.setAddressStreetDict(privateRoomDataContainer.getAddressStreetDict());
        this.setAddressHouse(privateRoomDataContainer.getAddressHouse());
        this.setAddressKorpus(privateRoomDataContainer.getAddressKorpus());
        this.setAddressFlat(privateRoomDataContainer.getAddressFlat());

    }




    // Флаг изменениия флага доверенности
    private Boolean dov_enable_changed = true;

    public Boolean getDov_enable_changed() {
        return dov_enable_changed;
    }

    public void setDov_enable_changed(Boolean dov_enable_changed) {
        this.dov_enable_changed = dov_enable_changed;
    }

    private String address;
    public void setAddress(String address) {
        this.address = address;
    }
    public String getAddress() {
        return this.address;
    }

    private String addressCountryCode = "ru";
    public void setAddressCountryCode(String addressCountryCode) {
        this.addressCountryCode = addressCountryCode;
    }
    public String getAddressCountryCode() {
        return this.addressCountryCode;
    }

    private String addressCountryInput;
    public void setAddressCountryInput(String addressCountryInput) {
        this.addressCountryInput = addressCountryInput;
    }
    public String getAddressCountryInput() {
        return this.addressCountryInput;
    }

    private String addressCountrySettlement;
    public void setAddressCountrySettlement(String addressCountrySettlement) {
        this.addressCountrySettlement = addressCountrySettlement;
    }
    public String getAddressCountrySettlement() {
        return this.addressCountrySettlement;
    }


    private String factAddressCountryCode = "ru";
    public void setFactAddressCountryCode(String factAddressCountryCode) {
        this.factAddressCountryCode = factAddressCountryCode;
    }
    public String getFactAddressCountryCode() {
        return this.factAddressCountryCode;
    }

    private String factAddressCountryInput;
    public void setFactAddressCountryInput(String factAddressCountryInput) {
        this.factAddressCountryInput = factAddressCountryInput;
    }
    public String getFactAddressCountryInput() {
        return this.factAddressCountryInput;
    }

    private String factAddressCountrySettlement;
    public void setFactAddressCountrySettlement(String factAddressCountrySettlement) {
        this.factAddressCountrySettlement = factAddressCountrySettlement;
    }
    public String getFactAddressCountrySettlement() {
        return this.factAddressCountrySettlement;
    }


	
	//Закладка Тип заявителя
		
			//Поле Заявление подает представитель заявителя, действующий на основании доверенности
			
			
			private String dov_enable;	//По умолчанию: отображается
//
//При отображении:
//По умолчанию: Не активирован
//
//Логика:
//1. При деактивированном dov_enable  осуществляется 
//переход на ШАГ 2 (ШАГ 3 пропускаются). Далее ШАГ 4,5,6
//2. При активированном dov_enable  осуществляется 
//переход на ШАГ 3 (ШАГ 2 пропускаются). Далее ШАГ 4,5,6
		
	
	//Закладка Сведения о заявителе
		
			//Поле <h2>Сведения о заявителе</h2>
			
			//Поле <html><i>Нижеследующие поля заполняются на основании учетной записи на портале и не могут быть изменены. 
	//Если в заявлении указаны неверные данные, необходимо выполнить одно из следующих действий:
	//<br>1. Выйти из учетной записи и авторизоваться заново под вашим логином и паролем;
	//<br>2. В случае необходимости внести изменения в учетную запись в установленном порядке.</i></html>
			
			//Поле Фамилия

			private String lastName;	//По умолчанию: 
//данные из ЛК
//Недоступно для редактирования
//
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Имя

			private String firstName;	//По умолчанию: 
//данные из ЛК
//Недоступно для редактирования
//
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Отчество (если имеется)

			private String middleName;	//По умолчанию: 
//данные из ЛК
//Недоступно для редактирования
//
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле <html><i>Нижеследующие поля заполняются заявителем</i></html>
			
			//Поле Заявитель по отношению к ребенку является
			
			
			private String applChild;	//64_APPLICANT_CHILD_64053
//
//Значения:
//1. Матерью
//2. Отцом
//3. Опекуном (попечителем)
		
			//Поле Категория заявителя


			private String applCategory;	//64_APPLICANT_CATEGORY_64053
//По умолчанию: поле скрыто
//
//Значения:
//1. Работающий
//2. Неработающий (состоящий на учете в службе занятости населения)
//3. Неработающий (не состоящий на учете в службе занятости населения)
//4. Работающий пенсионер
//5. Неработающий пенсионер
//6. Учащийся
//7. Студент
//8. Работающий инвалид
//9. Неработающий инвалид
//
//Логика:
//1. Отображается при выборе значения  "1. Матерью"
//2. Отображается при выборе значения "2. Отцом"
//3. Не отображается при выборе значения "3. Опекуном (попечителем)"
		
			//Поле Дата рождения заявителя
			
			
			private Date birthdateAppl;	//По умолчанию: поле скрыто
//
//Логика:
//1. Отображается при выборе значения  "1. Матерью"
//2. Отображается при выборе значения "2. Отцом"
//3. Не отображается при выборе значения "3. Опекуном (попечителем)"
		
			//Поле Место работы (учебы)
			
			
			private String placeJob;	//По умолчанию: поле скрыто
//
//Логика:
//1. Отображается при выборе значения  "1. Матерью"
//2. Отображается при выборе значения "2. Отцом"
//3. Не отображается при выборе значения "3. Опекуном (попечителем)"
		
			//Поле <html><i>Нижеследующие поля заполняются на основании учетной записи на портале. 
	//Могут быть изменены в ходе заполнения формы заявления.</i></html>
			
			//Поле Сведения о месте регистрации заявителя
			
			//Поле Индекс
			
			
			private String addressIndex;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию: данные из ЛК
		
			//Поле Страна
			
			
			private String addressCountry = "643";	//в АИС соединять в одну строку и передавать в параметре address
//Использовать справочник LS_INSOFT_OKSM
//По умолчанию: 643 - Россия
		
			//Поле Ввод адреса
			
			
			private String addressEnterType;	//в АИС соединять в одну строку и передавать в параметре address
//Заменить на radiogroup.
//Зашить значения на форму: 1. Из справочника / 2. Вручную
//По умолчанию: выбрано "1. Из справочника"
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия"
		
			//Поле Область (край, республика)
			
			
			private String addressRegion;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию: данные из ЛК
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1 Из справочника"
		
			//Поле Район
			
			
			private String addressRayon;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию: данные из ЛК
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643. Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Тип населенного пункта
			
			
			private String addressSettlementType;	//в АИС соединять в одну строку и передавать в параметре address
//заменить на radiogroup.
//Зашить значения на форму: 1. Город / 2. Населенный пункт
//По умолчанию: выбрано "1. Город"
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Город
			
			
			private String addressCity;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию: данные из ЛК
//Логика:
//1. Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
//2. Скрывается при выборе в поле "Тип населенного пункта" значения "2. Населенный пункт"
		
			//Поле Населенный пункт
			
			
			private String addressSettlementText;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию: данные из ЛК
//Логика:
//1. Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
//2. Скрывается при выборе в поле "Тип населенного пункта" значения "1. Город"
		
			//Поле Населенный пункт
			
			
			private String addressSettlementDict;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию: данные из ЛК
//Заменить на dictionaryLookup
//Справочник КЛАДР портала
//В нем выбирается регион-район-населенный пункт (город)
//Логика:
//1. Скрывается при выборе в поле "Ввод адреса" значения "2. Вручную"
		
			//Поле Улица
			
			
			private String addressStreetText;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию: данные из ЛК
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Улица
			
			
			private String addressStreetDict;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию: данные из ЛК
//Заменить на dictionaryLookup
//Справочник КЛАДР портала
//В нем выбирается улица выбранного н.п.
//Логика:
//1. Скрывается при выборе в поле "Ввод адреса" значения "2. Вручную"
		
			//Поле Дом
			
			
			private String addressHouse;	//По умолчанию: данные из ЛК
//в АИС соединять в одну строку и передавать в параметре address
		
			//Поле Корпус
			
			
			private String addressKorpus;	//По умолчанию: данные из ЛК
//в АИС соединять в одну строку и передавать в параметре address
		
			//Поле Квартира
			
			
			private String addressFlat;	//По умолчанию: данные из ЛК
//в АИС соединять в одну строку и передавать в параметре address
		
			//Поле Сведения о месте жительства (пребывания) заявителя
			
			//Поле Индекс
			
			
			private String factAddressIndex;	//в АИС соединять в одну строку и передавать в параметре factAddress
		
			//Поле Страна
			
			
			private String factAddressCountry = "643";;	//в АИС соединять в одну строку и передавать в параметре factAddress
//Использовать справочник LS_INSOFT_OKSM
//По умолчанию: 643 - Россия
		
			//Поле Ввод адреса
			
			
			private String factAddressEnterType;	//в АИС соединять в одну строку и передавать в параметре factAddress
//Заменить на radiogroup.
//Зашить значения на форму: 1. Из справочника / 2. Вручную
//По умолчанию: выбрано "1. Из справочника"
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия"
		
			//Поле Область (край, республика)
			
			
			private String factAddressRegion;	//в АИС соединять в одну строку и передавать в параметре factAddress
//
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Район
			
			
			private String factAddressRayon;	//в АИС соединять в одну строку и передавать в параметре factAddress
//
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Тип населенного пункта
			
			
			private String factAddressSettlementType;	//в АИС соединять в одну строку и передавать в параметре factAddress
//заменить на radiogroup.
//Зашить значения на форму: 1. Город / 2. Населенный пункт
//По умолчанию: выбрано "1. Город"
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Город
			
			
			private String factAddressCity;	//в АИС соединять в одну строку и передавать в параметре factAddress
//
//Логика:
//1. Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
//2. Скрывается при выборе в поле "Тип населенного пункта" значения "2. Населенный пункт"
		
			//Поле Населенный пункт
			
			
			private String factAddressSettlementText;	//в АИС соединять в одну строку и передавать в параметре factAddress
//
//Логика:
//1. Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
//2. Скрывается при выборе в поле "Тип населенного пункта" значения "1. Город"
		
			//Поле Населенный пункт
			
			
			private String factAddressSettlementDict;	//в АИС соединять в одну строку и передавать в параметре factAddress
//Заменить на dictionaryLookup
//Справочник КЛАДР портала
//В нем выбирается регион-район-населенный пункт (город)
//Логика:
//1. Скрывается при выборе в поле "Ввод адреса" значения "2. Вручную"
		
			//Поле Улица
			
			
			private String factAddressStreetText;	//в АИС соединять в одну строку и передавать в параметре factAddress
//
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Улица
			
			
			private String factAddressStreetDict;	//в АИС соединять в одну строку и передавать в параметре factAddress
//Заменить на dictionaryLookup
//Справочник КЛАДР портала
//В нем выбирается улица выбранного н.п.
//Логика:
//1. Скрывается при выборе в поле "Ввод адреса" значения "2. Вручную"
		
			//Поле Дом
			
			
			private String factAddressHouse;	//в АИС соединять в одну строку и передавать в параметре factAddress
		
			//Поле Корпус
			
			
			private String factAddressKorpus;	//в АИС соединять в одну строку и передавать в параметре factAddress
		
			//Поле Квартира
			
			
			private String factAddressFlat;	//в АИС соединять в одну строку и передавать в параметре factAddress
		
			//Поле Номер контактного телефона
			
			
			private String phone;	//По умолчанию:
//Данные из ЛК - "Домашний телефон"
//
//Валидация: phone (перекрыть)
		
			//Поле Адрес электронной почты
			
			
			private String email;	//По умолчанию:
//Данные из ЛК
//
//Валидация: email
		
			//Поле <h2>Сведения о документе, удостоверяющем личность заявителя</h2>
			
			//Поле Тип документа, удостоверяющего личность
			
			
			private String identityDocType;	//Виджет заменить на dictionaryLookup. Использовать справочник DUL_LS
//По умолчанию:
//Не заполнен
//Значения:
//1 - Паспорт гражданина РФ
//2 - Временное удостоверение личности гражданина РФ
//3 - Вид на жительство (лица без гражданства)/ (иностранного гражданина)
//4 - Иностранный паспорт
//5 - Иной документ, удостоверяющий личность
//Логика: 
//1. При выборе значения из справочника 5 отображается поле #otherDocTypeName
		
			//Поле Название иного документа, удостоверяющего личность
			
			
			private String otherDocTypeName;	//По умолчанию:
//Скрыт
//
//Логика: 
//1. Отображается при выборе значения  5 из справочника #identityDocType
//
//Разработчику: При интеграции передавать в параметре identityDocType
		
			//Поле Серия
			
			
			private String passSeria;	//Логика: 
//1. Обязателен при выборе из справочника #identityDocType значений 1,3,4
//2. Не обязателен при выборе из справочника #identityDocType значений 2,5
//3. При выборе из справочника #identityDocType значения 1, валидация: 4 цифры
//4. При выборе из справочника #identityDocType значения 3, валидация: допустимо для ввода 80 или 81 или 82 или 83
//5. При выборе из справочника #identityDocType значения 2,4,5, валидация отсутствует
		
			//Поле Номер
			
			
			private String passNo;	//Логика: 
//1. Обязателен всегда
//2. При выборе из справочника #identityDocType значения 1, валидация: 6 цифр
//3. При выборе из справочника #identityDocType значения 2 или 3, валидация: 7 цифр
//4. При выборе из справочника #identityDocType значения 4,5, валидация отсутствует
		
			//Поле Дата выдачи
			
			
			private Date passDate;	//Логика: 
//1. Обязателен всегда
		
			//Поле Кем выдан
			
			
			private String passFrom;	//Логика: 
//1. Обязателен всегда
		
			//Поле <html><i>
	//Внимание! Размещенное ниже поле предназначено для представления вместе с заявлением электронной копии документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Документ, удостоверяющий личность заявителя
			
			
			private FileBean identityDocLoad;	//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле <h2>Сведения, подтверждающие полномочия опекуна или попечителя</h2>
			
			//Поле <html><i>
	//Внимание! Размещенные ниже поля предназначены для представления вместе с заявлением электронных копий документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Документ, подтверждающий факт установления опеки (попечительства)
			
			
			private FileBean dovOpekLoad;	//По умолчанию: поле скрыто
//
//Логика:
//1. Отображается при выборе значения "3. Опекуном (попечителем)"
//2. Не отображается при выборе значения  "1. Матерью"
//3. Не отображается при выборе значения "2. Отцом"
//
//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле Справка или иной документ, подтверждающий назначение денежных выплат, направленных на содержание опекаемого ребенка, в случаях предусмотренных федеральным законодательством
			
			
			private FileBean guardianDocMoneyLoad;	//По умолчанию: поле скрыто
//
//Логика:
//1. Отображается при выборе значения "3. Опекуном (попечителем)"
//2. Не отображается при выборе значения  "1. Матерью"
//3. Не отображается при выборе значения "2. Отцом"
//
//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
	
	//Закладка Сведения о заявителе
		
			//Поле <h2>Сведения об уполномоченном представителе</h2>
			
			//Поле <html><i>
	//Внимание! Размещенные ниже поля предназначены для представления вместе с заявлением электронных копий документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Нотариально заверенная доверенность на совершение действий от имени заявителя
			
			
			private FileBean dovDovLoad;	//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле Документ, удостоверяющий личность уполномоченного представителя
			
			
			private FileBean dovPasLoad;	//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле <h2>Сведения о заявителе</h2>
			
			//Поле Фамилия
/*
			
			private String lastName;	//По умолчанию: 
//Незаполнено, Доступно для редактирования
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Имя
			
			
			private String firstName;	//По умолчанию: 
//Незаполнено, Доступно для редактирования
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Отчество (если имеется)
			
			
			private String middleName;	//По умолчанию: 
//Незаполнено, Доступно для редактирования
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Заявитель по отношению к ребенку является
			
			
			private String applChild;	//64_APPLICANT_CHILD_64053
//
//Значения:
//1. Матерью
//2. Отцом
//3. Опекуном (попечителем)
		
			//Поле Категория заявителя
			
			
			private String applCategory;	//64_APPLICANT_CATEGORY_64053
//По умолчанию: поле скрыто
//
//Значения:
//1. Работающий
//2. Неработающий (состоящий на учете в службе занятости населения)
//3. Неработающий (не состоящий на учете в службе занятости населения)
//4. Работающий пенсионер
//5. Неработающий пенсионер
//6. Учащийся
//7. Студент
//8. Работающий инвалид
//9. Неработающий инвалид
//
//Логика:
//1. Отображается при выборе значения  "1. Матерью"
//2. Отображается при выборе значения "2. Отцом"
//3. Не отображается при выборе значения "3. Опекуном (попечителем)"
		
			//Поле Дата рождения заявителя
			
			
			private Date birthdateAppl;	//По умолчанию: поле скрыто
//
//Логика:
//1. Отображается при выборе значения  "1. Матерью"
//2. Отображается при выборе значения "2. Отцом"
//3. Не отображается при выборе значения "3. Опекуном (попечителем)"
		
			//Поле Место работы (учебы)
			
			
			private String placeJob;	//По умолчанию: поле скрыто
//
//Логика:
//1. Отображается при выборе значения  "1. Матерью"
//2. Отображается при выборе значения "2. Отцом"
//3. Не отображается при выборе значения "3. Опекуном (попечителем)"
		
			//Поле Сведения о месте регистрации заявителя
			
			//Поле Индекс
			
			
			private String addressIndex;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию:
//Незаполнено, Доступно для редактирования
		
			//Поле Страна
			
			
			private String addressCountry;	//в АИС соединять в одну строку и передавать в параметре address
//Использовать справочник LS_INSOFT_OKSM
//По умолчанию: 643 - Россия
		
			//Поле Ввод адреса
			
			
			private String addressEnterType;	//в АИС соединять в одну строку и передавать в параметре address
//Заменить на radiogroup.
//Зашить значения на форму: 1. Из справочника / 2. Вручную
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия"
		
			//Поле Область (край, республика)
			
			
			private String addressRegion;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Район
			
			
			private String addressRayon;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Тип населенного пункта
			
			
			private String addressSettlementType;	//в АИС соединять в одну строку и передавать в параметре address
//заменить на radiogroup.
//Зашить значения на форму: 1. Город / 2. Населенный пункт
//По умолчанию: выбрано "1. Город"
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Город
			
			
			private String addressCity;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Логика:
//1. Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
//2. Скрывается при выборе в поле "Тип населенного пункта" значения "2. Населенный пункт"
		
			//Поле Населенный пункт
			
			
			private String addressSettlementText;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Логика:
//1. Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
//2. Скрывается при выборе в поле "Тип населенного пункта" значения "1. Город"
		
			//Поле Населенный пункт
			
			
			private String addressSettlementDict;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Заменить на dictionaryLookup
//Справочник КЛАДР портала
//В нем выбирается регион-район-населенный пункт (город)
//Логика:
//1. Скрывается при выборе в поле "Ввод адреса" значения "2. Вручную"
		
			//Поле Улица
			
			
			private String addressStreetText;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Улица
			
			
			private String addressStreetDict;	//в АИС соединять в одну строку и передавать в параметре address
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Заменить на dictionaryLookup
//Справочник КЛАДР портала
//В нем выбирается улица выбранного н.п.
//Логика:
//1. Скрывается при выборе в поле "Ввод адреса" значения "2. Вручную"
		
			//Поле Дом
			
			
			private String addressHouse;	//По умолчанию:
//Незаполнено, Доступно для редактирования
//в АИС соединять в одну строку и передавать в параметре address
		
			//Поле Корпус
			
			
			private String addressKorpus;	//По умолчанию:
//Незаполнено, Доступно для редактирования
//в АИС соединять в одну строку и передавать в параметре address
		
			//Поле Квартира
			
			
			private String addressFlat;	//По умолчанию:
//Незаполнено, Доступно для редактирования
//в АИС соединять в одну строку и передавать в параметре address
		
			//Поле Сведения о месте жительства (пребывания) заявителя
			
			//Поле Индекс
			
			
			private String factAddressIndex;	//в АИС соединять в одну строку и передавать в параметре factAddress
//По умолчанию:
//Незаполнено, Доступно для редактирования
		
			//Поле Страна
			
			
			private String factAddressCountry;	//в АИС соединять в одну строку и передавать в параметре factAddress
//Использовать справочник LS_INSOFT_OKSM
//По умолчанию: Россия
		
			//Поле Ввод адреса
			
			
			private String factAddressEnterType;	//в АИС соединять в одну строку и передавать в параметре factAddress
//Заменить на radiogroup.
//Зашить значения на форму: 1. Из справочника / 2. Вручную
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия"
		
			//Поле Область (край, республика)
			
			
			private String factAddressRegion;	//в АИС соединять в одну строку и передавать в параметре factAddress
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Район
			
			
			private String factAddressRayon;	//в АИС соединять в одну строку и передавать в параметре factAddress
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Тип населенного пункта
			
			
			private String factAddressSettlementType;	//в АИС соединять в одну строку и передавать в параметре factAddress
//заменить на radiogroup.
//Зашить значения на форму: 1. Город / 2. Населенный пункт
//По умолчанию: выбрано "1. Город"
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Город
			
			
			private String factAddressCity;	//в АИС соединять в одну строку и передавать в параметре factAddress
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Логика:
//1. Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
//2. Скрывается при выборе в поле "Тип населенного пункта" значения "2. Населенный пункт"
		
			//Поле Населенный пункт
			
			
			private String factAddressSettlementText;	//в АИС соединять в одну строку и передавать в параметре factAddress
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Логика:
//1. Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
//2. Скрывается при выборе в поле "Тип населенного пункта" значения "1. Город"
		
			//Поле Населенный пункт
			
			
			private String factAddressSettlementDict;	//в АИС соединять в одну строку и передавать в параметре factAddress
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Заменить на dictionaryLookup
//Справочник КЛАДР портала
//В нем выбирается регион-район-населенный пункт (город)
//Логика:
//1. Скрывается при выборе в поле "Ввод адреса" значения "2. Вручную"
		
			//Поле Улица
			
			
			private String factAddressStreetText;	//в АИС соединять в одну строку и передавать в параметре factAddress
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Логика:
//Скрывается при выборе в поле "Страна" значения, не "643 - Россия" или при выборе в поле "Ввод адреса" значения "1. Из справочника"
		
			//Поле Улица
			
			
			private String factAddressStreetDict;	//в АИС соединять в одну строку и передавать в параметре factAddress
//По умолчанию:
//Незаполнено, Доступно для редактирования
//Заменить на dictionaryLookup
//Справочник КЛАДР портала
//В нем выбирается улица выбранного н.п.
//Логика:
//1. Скрывается при выборе в поле "Ввод адреса" значения "2. Вручную"
		
			//Поле Дом
			
			
			private String factAddressHouse;	//По умолчанию:
//Незаполнено, Доступно для редактирования
//в АИС соединять в одну строку и передавать в параметре factAddress
		
			//Поле Корпус
			
			
			private String factAddressKorpus;	//По умолчанию:
//Незаполнено, Доступно для редактирования
//в АИС соединять в одну строку и передавать в параметре factAddress
		
			//Поле Квартира
			
			
			private String factAddressFlat;	//По умолчанию:
//Незаполнено, Доступно для редактирования
//в АИС соединять в одну строку и передавать в параметре factAddress
		
			//Поле Контактный телефон
			
			
			private String phone;	//По умолчанию:
//Незаполнено, Доступно для редактирования
//Валидация: phone (перекрыть)
		
			//Поле Адрес электронной почты
			
			
			private String email;	//По умолчанию:
//Незаполнено, Доступно для редактирования
//Валидация: email
		
			//Поле <h2>Сведения о документе, удостоверяющем личность заявителя</h2>
			
			//Поле Тип документа, удостоверяющего личность
			
			
			private String identityDocType;	//Виджет заменить на dictionaryLookup. Использовать справочник DUL_LS
//По умолчанию:
//Не заполнен
//Значения:
//1 - Паспорт гражданина РФ
//2 - Временное удостоверение личности гражданина РФ
//3 - Вид на жительство (лица без гражданства)/ (иностранного гражданина)
//4 - Иностранный паспорт
//5 - Иной документ, удостоверяющий личность
//Логика: 
//1. При выборе значения из справочника 5 отображается поле #otherDocTypeName
		
			//Поле Название иного документа, удостоверяющего личность
			
			
			private String otherDocTypeName;	//По умолчанию:
//Скрыт
//
//Логика: 
//1. Отображается при выборе значения  5 из справочника #identityDocType
//
//Разработчику: При интеграции передавать в параметре identityDocType
		
			//Поле Серия
			
			
			private String passSeria;	//Логика: 
//1. Обязателен при выборе из справочника #identityDocType значений 1,3,4
//2. Не обязателен при выборе из справочника #identityDocType значений 2,5
//3. При выборе из справочника #identityDocType значения 1, валидация: 4 цифры
//4. При выборе из справочника #identityDocType значения 3, валидация: допустимо для ввода 80 или 81 или 82 или 83
//5. При выборе из справочника #identityDocType значения 2,4,5, валидация отсутствует
		
			//Поле Номер
			
			
			private String passNo;	//Логика: 
//1. Обязателен всегда
//2. При выборе из справочника #identityDocType значения 1, валидация: 6 цифр
//3. При выборе из справочника #identityDocType значения 2 или 3, валидация: 7 цифр
//4. При выборе из справочника #identityDocType значения 4,5, валидация отсутствует
		
			//Поле Дата выдачи
			
			
			private Date passDate;	//Логика: 
//1. Обязателен всегда
		
			//Поле Кем выдан
			
			
			private String passFrom;	//Логика: 
//1. Обязателен всегда


		
			//Поле <html><i>
	//Внимание! Размещенное ниже поле предназначено для представления вместе с заявлением электронной копии документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Документ, удостоверяющий личность заявителя
			
			
			private FileBean identityDocLoad;	//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле <h2>Сведения, подтверждающие полномочия опекуна или попечителя</h2>
			
			//Поле <html><i>
	//Внимание! Размещенные ниже поля предназначены для представления вместе с заявлением электронных копий документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Документ, подтверждающий факт установления опеки (попечительства)
			
			
			private FileBean dovOpekLoad;	//По умолчанию: поле скрыто
//
//Логика:
//1. Отображается при выборе значения "3. Опекуном (попечителем)"
//2. Не отображается при выборе значения  "1. Матерью"
//3. Не отображается при выборе значения "2. Отцом"
//
//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле Справка или иной документ, подтверждающий назначение денежных выплат, направленных на содержание опекаемого ребенка, в случаях предусмотренных федеральным законодательством
			
			
			private FileBean guardianDocMoneyLoad;	//По умолчанию: поле скрыто
//
//Логика:
//1. Отображается при выборе значения "3. Опекуном (попечителем)"
//2. Не отображается при выборе значения  "1. Матерью"
//3. Не отображается при выборе значения "2. Отцом"
//
//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
	              */
	//Закладка Сведения о лице, нуждающемся в услуге (ребенок)
		
			//Поле <h2>Сведения о лице, нуждающемся в услуге</h2>
			
			//Поле Фамилия
			
			
			private String recipientLastName;	//По умолчанию: 
//Незаполнено, Доступно для редактирования
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Имя
			
			
			private String recipientFirstName;	//По умолчанию: 
//Незаполнено, Доступно для редактирования
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Отчество (если имеется)
			
			
			private String recipientMiddleName;	//По умолчанию: 
//Незаполнено, Доступно для редактирования
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Дата рождения
			
			
			private Date recipientBirthDate;	//По умолчанию: 
//Незаполнено, Доступно для редактирования
		
			//Поле Социальный статус ребенка
			
			
			private String recipientStatus;	//64_RECIPIENT_STATUS_64053
//
//Значения:
//
//1. Из малообеспеченной семьи
//2. Из семьи военнослужащих, проходивших военную службу по призыву и погибших (умерших), пропавших без вести, ставших инвалидами в связи с выполнением задач в условиях вооруженного конфликта не международного характера в Чеченской республике и на непосредственно прилегающих к ней территориях Северного Кавказа, отнесенных к зоне вооруженного конфликта, а так же с выполнением задач в ходе контртеррористических операций на территории Северо-Кавказского региона
//3. Ребенок-сирота
//4. Ребенок с ограниченными возможностями здоровья
//5. Ребенок, оставшийся без попечения родителей
//6. Ребенок из семьи, находящейся в социально-опасном положении
//7. Ребенок является воспитанником социального приюта или учреждения интернатного типа
		
			//Поле <html><i>
	//Внимание! Размещенное ниже поле предназначено для представления вместе с заявлением электронной копии документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Постановление комиссии по делам несовершеннолетних и защите их прав о признании семьи находящейся в социально-опасном положении
			
			
			private FileBean recipientDangerDocLoad;	//По умолчанию: поле скрыто
//
//Логика:
//Отображается при выборе значения справочника:
//
//6. Ребенок из семьи, находящейся в социально-опасном положении
//
//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле Копия извещения о гибели (смерти), пропаже без вести военнослужащего или справка медико-социальной экспертизы об установлении военнослужащему инвалидности в связи с выполнением задач по обеспечению правопорядка и общественной безопасности на территории Северо-Кавказского региона
			
			
			private FileBean recipientWarDocLoad;	//По умолчанию: поле скрыто
//
//Логика:
//Отображается при выборе значения справочника:
//
//2. Из семьи военнослужащих, проходивших военную службу по призыву и погибших (умерших), пропавших без вести, ставших инвалидами в связи с выполнением задач в условиях вооруженного конфликта не международного характера в Чеченской республике и на непосредственно прилегающих к ней территориях Северного Кавказа, отнесенных к зоне вооруженного конфликта, а так же с выполнением задач в ходе контртеррористических операций на территории Северо-Кавказского региона
//
//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле Выписка из приказа государственного учреждения о нахождении ребенка на полном государственном обеспечении
			
			
			private FileBean recipientProvisionDocLoad;	//По умолчанию: поле скрыто
//
//Логика:
//Отображается при выборе значения справочника:
//
//7. Ребенок является воспитанником социального приюта или учреждения интернатного типа
//
//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле Справка медико-социальной экспертизы об установлении инвалидности
			
			
			private FileBean recipientInvalidDocLoad;	//По умолчанию: поле скрыто
//
//Логика:
//Отображается при выборе значения справочника:
//
//4. Ребенок с ограниченными возможностями здоровья
//
//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле <h2>Сведения о документе, удостоверяющем личность лица, нуждающегося в услуге</h2>
			
			//Поле Тип документа, удостоверяющего личность
			
			
			private String recipientIdentityDocType;	//Виджет заменить на dictionaryLookup. Использовать справочник DUL_LS
//По умолчанию:
//Не заполнен
//Значения:
//1 - Паспорт гражданина РФ
//2 - Временное удостоверение личности гражданина РФ
//3 - Вид на жительство (лица без гражданства)/ (иностранного гражданина)
//4 - Иностранный паспорт
//5 - Иной документ, удостоверяющий личность
//Логика: 
//1. При выборе значения из справочника 5 отображается поле #recipientOtherDocTypeName
		
			//Поле Название иного документа, удостоверяющего личность
			
			
			private String recipientOtherDocTypeName;	//По умолчанию:
//Скрыт
//
//Логика: 
//1. Отображается при выборе значения  5 из справочника #recipientIdentityDocType
//
//Разработчику: При интеграции передавать в параметре #recipientIdentityDocType
		
			//Поле Серия
			
			
			private String recipientPassSeria;	//Логика: 
//1. Обязателен при выборе из справочника #recipientIdentityDocType значений 1,3,4
//2. Не обязателен при выборе из справочника #recipientIdentityDocType значений 2,5
//3. При выборе из справочника #recipientIdentityDocType значения 1, валидация: 4 цифры
//4. При выборе из справочника #recipientIdentityDocType значения 3, валидация: допустимо для ввода 80 или 81 или 82 или 83
//5. При выборе из справочника #recipientIdentityDocType значения 2,4,5, валидация отсутствует
		
			//Поле Номер
			
			
			private String recipientPassNo;	//Логика: 
//1. Обязателен всегда
//2. При выборе из справочника #recipientIdentityDocType значения 1, валидация: 6 цифр
//3. При выборе из справочника #recipientIdentityDocType значения 2 или 3, валидация: 7 цифр
//4. При выборе из справочника #recipientIdentityDocType значения 4,5, валидация отсутствует
		
			//Поле Дата выдачи
			
			
			private Date recipientPassDate;	//Логика: 
//1. Обязателен всегда
		
			//Поле Кем выдан
			
			
			private String recipientPassFrom;	//Логика: 
//1. Обязателен всегда
		
			//Поле <html><i>
	//Внимание! Размещенное ниже поле предназначено для представления вместе с заявлением электронной копии документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Документ, удостоверяющий личность лица, нуждающегося в услуге
			
			
			private FileBean recipientIdentityDocLoad;	//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле Документ, подтверждающий проживание ребенка на территории Саратовской области

//
//Логика:
//Отображается при выборе значения справочника, отличного от "1 - Паспорт гражданина РФ"
//Не отображается при выборе значения справочника "1 - Паспорт гражданина РФ"
//
//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
	
	//Закладка Сведения о составе семьи
		
			//Поле <h2>Сведения о составе семьи</h2>
			
			//Поле Фамилия
			
			

            private List<String> familyLastName = AccessCounterList.createEmpty(String.class);
//Незаполнено, Доступно для редактирования
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Имя

            private List<String> familyFirstName = AccessCounterList.createEmpty(String.class);
//Незаполнено, Доступно для редактирования
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Отчество (если имеется)

            private List<String> familyMiddleName = AccessCounterList.createEmpty(String.class);
//Незаполнено, Доступно для редактирования
//Валидация: cyrillic (кириллические буквы, пробел и знак дефиса)
		
			//Поле Дата рождения

            private List<Date> familyBirthDate = AccessCounterList.createEmpty(Date.class);

//Незаполнено, Доступно для редактирования
		
			//Поле Степень родства по отношению к ребенку

    private List<String> familyStatus = AccessCounterList.createEmpty(String.class);

//
//Значения:
//
//1. Мать
//2. Отец
//3. Брат
//4. Сестра


			//Поле Категория заявителя

    private List<String> familyCategory = AccessCounterList.createEmpty(String.class);

//
//Значения:
//Значения:
//1. Работающий
//2. Неработающий (состоящий на учете в службе занятости населения)
//3. Неработающий (не состоящий на учете в службе занятости населения)
//4. Работающий пенсионер
//5. Неработающий пенсионер
//6. Учащийся
//7. Студент
//8. Работающий инвалид
//9. Неработающий инвалид

			//Поле Место работы (учебы)

    private List<String> familyPlaceJob = AccessCounterList.createEmpty(String.class);

		
			//Поле Добавить
			
			//Поле <h2>Сведения о всех видах доходов семьи</h2>
			
			//Поле <html><i>
	//Внимание! Размещенные ниже поля предназначены для представления вместе с заявлением электронных копий документов. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Сведения о всех видах доходов семьи
			
			
			private FileBean familyRentDocLoad;	//Валидатор: PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS.
		
			//Поле <h2>Документы, предоставляемые Заявителем по собственной инициативе</h2>
			
			//Поле Сведения о размере пенсии
			
			

            private List<FileBean> familyPensionDocLoad = AccessCounterList.createEmpty(FileBean.class);
			//Поле Добавить
			
			//Поле Обязуюсь при извещении меня о наличии путевки (предоставлении места в лагере с дневным пребыванием) предоставить все требуемые документы (доходы всех членов семьи за три предыдущих месяца до момента выдачи путевки)
			
			
			private String commitment;	//По умолчанию: не активирован
		
	
	//Закладка Дополнительные сведения
		
			//Поле <h2>Дополнительные сведения</h2>
			
			//Поле Выбор цели обращения заявителя
			
			
			private String organizationRecreation;	//64_ORGANIZATION_RECREATION_64053
//
//Значения:
//
//1. Предоставление выдачи путевки в Организации отдыха и оздоровления
//2. Зачисление Социозащитным учреждением ребенка в лагерь с дневным пребыванием
//
//Логика:
//При выборе значения 1 код цели заменяется на статичный код 36400053-1
//При выборе значения 2 код цели заменяется на статичный код 36400053-2
		
			//Поле Желаемый сезон оздоровления
			
			
			private String seasonRecovery;	//64_SEASON_RECOVERY_64053
//
//Значения:
//
//1. Весна
//2. Лето
//3. Осень
//4. Зима
		
			//Поле Наличие земельного участка (га)
			
			
			private String landAvailability;	//
		
			//Поле Наличие пчелосемей (шт)
			
			
			private String beesAvailability;	//
		
			//Поле Наличие крупного рогатого скота (шт)
			
			
			private String livestockAvailability;	//
		
			//Поле Наличие свиней (шт)
			
			
			private String pigsAvailability;	//
		
			//Поле Наличие овец (шт)
			
			
			private String sheepAvailability;	//
		
			//Поле Наличие кур (шт)
			
			
			private String chickensAvailability;	//
		
			//Поле <h2>За три предыдущих месяца до подачи заявления реализовано:</h2>
			
			//Поле Мясо крупного рогатого скота (кг)
			
			
			private String livestockMeat;	//
		
			//Поле Мясо свиней (кг)
			
			
			private String pigsMeat;	//
		
			//Поле Мясо овец (кг)
			
			
			private String sheepMeat;	//
		
			//Поле Мясо кур (кг)
			
			
			private String chickensMeat;	//
		
			//Поле Молока (л)
			
			
			private String milk;	//
		
			//Поле Меда (кг)
			
			
			private String honey;	//
		
			//Поле Картофеля (кг)
			
			
			private String potatoes;	//
		
			//Поле Яиц куриных (шт)
			
			
			private String chickenEggs;	//
		
			//Поле <h2>Выбор органа социальной поддержки населения, предоставляющего государственную услугу</h2>
			
			//Поле Орган социальной поддержки населения, предоставляющий государственную услугу
			
			
			private String socialSupport;	//64_SOCIAL_SUPPORT_64053
//
//Значения:
//
//1. ГКУ СО «УСПН Александрово-Гайского района» 
//2. ГКУ СО «УСПН Аркадакского района»
//3. ГКУ СО «УСПН Аткарского района»
//4. ГКУ СО « УСПН Базарно-Карабулакского района»
//5. ГКУ СО «УСПН Балаковского района»
//6. ГКУ СО «УСПН Балашовского района»
//7. ГКУ СО «УСПН Балтайского района»
//8. ГКУ СО «УСПН Вольского района»
//9. ГБУ ЦСЗН Воскресенского района
//10. ГКУ СО «УСПН Дергачевского района»
//11. ГКУ СО «УСПН Духовницкого района» 
//12. ГКУ СО «УСПН Екатериновского района» 
//13. ГКУ СО «УСПН Ершовского района»
//14. ГКУ СО «УСПН Ивантеевского района» 
//15. ГБУ ЦСЗН Калининского района
//16. ГКУ СО «УСПН Красноармейского района» 
//17. ГКУ СО «УСПН Краснокутского района» 
//18. ГКУ СО «УСПН Краснопартизанского района» 
//19. ГКУ СО «УСПН Лысогорского района»
//20. ГКУ СО «УСПН Марксовского района» 
//21. ГКУ СО «УСПН Новобурасского района» 
//22. ГКУ СО «УСПН Новоузенского района»
//23. ГКУ СО «УСПН Озинского района»
//24. ГКУ СО «УСПН Перелюбского района»
//25. ГАУ СО УСПН Петровского района
//26. ГКУ СО «УСПН Питерского района»
//27. ГКУ СО «УСПН Пугачевского района»
//28. ГКУ СО «УСПН Ровенского района»
//29. ГБУ ЦСЗН Романовского района»
//30. ГКУ СО «УСПН Ртищевского района»
//31. ГКУ СО «УСПН Самойловского района»
//32. ГКУ СО «УСПН Саратовского района»
//33. ГКУ СО «УСПН Советского района»
//34. ГКУ СО «УСПН Татищевского района» 
//35. ГКУ СО «УСПН Турковского района»
//36. ГКУ СО «УСПН Федоровского района»
//37. ГКУ СО «УСПН Хвалынского района»
//38. ГКУ СО «УСПН Энгельсского района
//39. ГКУ СО «Комитет социальной поддержки населения г. Саратова»
		
            private String dopSvedFamily;

    public String getDopSvedFamily() {
        return dopSvedFamily;
    }

    public void setDopSvedFamily(String dopSvedFamily) {
        this.dopSvedFamily = dopSvedFamily;
    }


//Закладка Тип заявителя
		
			//Поле Заявление подает представитель заявителя, действующий на основании доверенности
			
			public void setDov_enable(String dov_enable) {
					this.dov_enable = dov_enable;
				}
			public String getDov_enable() {
				return this.dov_enable;
				}
		
	
	//Закладка Сведения о заявителе
		
			//Поле <h2>Сведения о заявителе</h2>
			
			//Поле <html><i>Нижеследующие поля заполняются на основании учетной записи на портале и не могут быть изменены. 
	//Если в заявлении указаны неверные данные, необходимо выполнить одно из следующих действий:
	//<br>1. Выйти из учетной записи и авторизоваться заново под вашим логином и паролем;
	//<br>2. В случае необходимости внести изменения в учетную запись в установленном порядке.</i></html>
			
			//Поле Фамилия
			
			public void setLastName(String lastName) {
					this.lastName = lastName;
				}
			public String getLastName() {
				return this.lastName;
				}
		
			//Поле Имя
			
			public void setFirstName(String firstName) {
					this.firstName = firstName;
				}
			public String getFirstName() {
				return this.firstName;
				}
		
			//Поле Отчество (если имеется)
			
			public void setMiddleName(String middleName) {
					this.middleName = middleName;
				}
			public String getMiddleName() {
				return this.middleName;
				}
		
			//Поле <html><i>Нижеследующие поля заполняются заявителем</i></html>
			
			//Поле Заявитель по отношению к ребенку является
			
			public void setApplChild(String applChild) {
					this.applChild = applChild;
				}
			public String getApplChild() {
				return this.applChild;
				}
		
			//Поле Категория заявителя
			
			public void setApplCategory(String applCategory) {
					this.applCategory = applCategory;
				}
			public String getApplCategory() {
				return this.applCategory;
				}
		
			//Поле Дата рождения заявителя
			
			public void setBirthdateAppl(Date birthdateAppl) {
					this.birthdateAppl = birthdateAppl;
				}
			public Date getBirthdateAppl() {
				return this.birthdateAppl;
				}
		
			//Поле Место работы (учебы)
			
			public void setPlaceJob(String placeJob) {
					this.placeJob = placeJob;
				}
			public String getPlaceJob() {
				return this.placeJob;
				}
		
			//Поле <html><i>Нижеследующие поля заполняются на основании учетной записи на портале. 
	//Могут быть изменены в ходе заполнения формы заявления.</i></html>
			
			//Поле Сведения о месте регистрации заявителя
			
			//Поле Индекс
			
			public void setAddressIndex(String addressIndex) {
					this.addressIndex = addressIndex;
				}
			public String getAddressIndex() {
				return this.addressIndex;
				}
		
			//Поле Страна
			
			public void setAddressCountry(String addressCountry) {
					this.addressCountry = addressCountry;
				}
			public String getAddressCountry() {
				return this.addressCountry;
				}
		
			//Поле Ввод адреса
			
			public void setAddressEnterType(String addressEnterType) {
					this.addressEnterType = addressEnterType;
				}
			public String getAddressEnterType() {
				return this.addressEnterType;
				}
		
			//Поле Область (край, республика)
			
			public void setAddressRegion(String addressRegion) {
					this.addressRegion = addressRegion;
				}
			public String getAddressRegion() {
				return this.addressRegion;
				}
		
			//Поле Район
			
			public void setAddressRayon(String addressRayon) {
					this.addressRayon = addressRayon;
				}
			public String getAddressRayon() {
				return this.addressRayon;
				}
		
			//Поле Тип населенного пункта
			
			public void setAddressSettlementType(String addressSettlementType) {
					this.addressSettlementType = addressSettlementType;
				}
			public String getAddressSettlementType() {
				return this.addressSettlementType;
				}
		
			//Поле Город
			
			public void setAddressCity(String addressCity) {
					this.addressCity = addressCity;
				}
			public String getAddressCity() {
				return this.addressCity;
				}
		
			//Поле Населенный пункт
			
			public void setAddressSettlementText(String addressSettlementText) {
					this.addressSettlementText = addressSettlementText;
				}
			public String getAddressSettlementText() {
				return this.addressSettlementText;
				}
		
			//Поле Населенный пункт
			
			public void setAddressSettlementDict(String addressSettlementDict) {
					this.addressSettlementDict = addressSettlementDict;
				}
			public String getAddressSettlementDict() {
				return this.addressSettlementDict;
				}
		
			//Поле Улица
			
			public void setAddressStreetText(String addressStreetText) {
					this.addressStreetText = addressStreetText;
				}
			public String getAddressStreetText() {
				return this.addressStreetText;
				}
		
			//Поле Улица
			
			public void setAddressStreetDict(String addressStreetDict) {
					this.addressStreetDict = addressStreetDict;
				}
			public String getAddressStreetDict() {
				return this.addressStreetDict;
				}
		
			//Поле Дом
			
			public void setAddressHouse(String addressHouse) {
					this.addressHouse = addressHouse;
				}
			public String getAddressHouse() {
				return this.addressHouse;
				}
		
			//Поле Корпус
			
			public void setAddressKorpus(String addressKorpus) {
					this.addressKorpus = addressKorpus;
				}
			public String getAddressKorpus() {
				return this.addressKorpus;
				}
		
			//Поле Квартира
			
			public void setAddressFlat(String addressFlat) {
					this.addressFlat = addressFlat;
				}
			public String getAddressFlat() {
				return this.addressFlat;
				}
		
			//Поле Сведения о месте жительства (пребывания) заявителя
			
			//Поле Индекс
			
			public void setFactAddressIndex(String factAddressIndex) {
					this.factAddressIndex = factAddressIndex;
				}
			public String getFactAddressIndex() {
				return this.factAddressIndex;
				}
		
			//Поле Страна
			
			public void setFactAddressCountry(String factAddressCountry) {
					this.factAddressCountry = factAddressCountry;
				}
			public String getFactAddressCountry() {
				return this.factAddressCountry;
				}
		
			//Поле Ввод адреса
			
			public void setFactAddressEnterType(String factAddressEnterType) {
					this.factAddressEnterType = factAddressEnterType;
				}
			public String getFactAddressEnterType() {
				return this.factAddressEnterType;
				}
		
			//Поле Область (край, республика)
			
			public void setFactAddressRegion(String factAddressRegion) {
					this.factAddressRegion = factAddressRegion;
				}
			public String getFactAddressRegion() {
				return this.factAddressRegion;
				}
		
			//Поле Район
			
			public void setFactAddressRayon(String factAddressRayon) {
					this.factAddressRayon = factAddressRayon;
				}
			public String getFactAddressRayon() {
				return this.factAddressRayon;
				}
		
			//Поле Тип населенного пункта
			
			public void setFactAddressSettlementType(String factAddressSettlementType) {
					this.factAddressSettlementType = factAddressSettlementType;
				}
			public String getFactAddressSettlementType() {
				return this.factAddressSettlementType;
				}
		
			//Поле Город
			
			public void setFactAddressCity(String factAddressCity) {
					this.factAddressCity = factAddressCity;
				}
			public String getFactAddressCity() {
				return this.factAddressCity;
				}
		
			//Поле Населенный пункт
			
			public void setFactAddressSettlementText(String factAddressSettlementText) {
					this.factAddressSettlementText = factAddressSettlementText;
				}
			public String getFactAddressSettlementText() {
				return this.factAddressSettlementText;
				}
		
			//Поле Населенный пункт
			
			public void setFactAddressSettlementDict(String factAddressSettlementDict) {
					this.factAddressSettlementDict = factAddressSettlementDict;
				}
			public String getFactAddressSettlementDict() {
				return this.factAddressSettlementDict;
				}
		
			//Поле Улица
			
			public void setFactAddressStreetText(String factAddressStreetText) {
					this.factAddressStreetText = factAddressStreetText;
				}
			public String getFactAddressStreetText() {
				return this.factAddressStreetText;
				}
		
			//Поле Улица
			
			public void setFactAddressStreetDict(String factAddressStreetDict) {
					this.factAddressStreetDict = factAddressStreetDict;
				}
			public String getFactAddressStreetDict() {
				return this.factAddressStreetDict;
				}
		
			//Поле Дом
			
			public void setFactAddressHouse(String factAddressHouse) {
					this.factAddressHouse = factAddressHouse;
				}
			public String getFactAddressHouse() {
				return this.factAddressHouse;
				}
		
			//Поле Корпус
			
			public void setFactAddressKorpus(String factAddressKorpus) {
					this.factAddressKorpus = factAddressKorpus;
				}
			public String getFactAddressKorpus() {
				return this.factAddressKorpus;
				}
		
			//Поле Квартира
			
			public void setFactAddressFlat(String factAddressFlat) {
					this.factAddressFlat = factAddressFlat;
				}
			public String getFactAddressFlat() {
				return this.factAddressFlat;
				}
		
			//Поле Номер контактного телефона
			
			public void setPhone(String phone) {
					this.phone = phone;
				}
			public String getPhone() {
				return this.phone;
				}
		
			//Поле Адрес электронной почты
			
			public void setEmail(String email) {
					this.email = email;
				}
			public String getEmail() {
				return this.email;
				}
		
			//Поле <h2>Сведения о документе, удостоверяющем личность заявителя</h2>
			
			//Поле Тип документа, удостоверяющего личность
			
			public void setIdentityDocType(String identityDocType) {
					this.identityDocType = identityDocType;
				}
			public String getIdentityDocType() {
				return this.identityDocType;
				}
		
			//Поле Название иного документа, удостоверяющего личность
			
			public void setOtherDocTypeName(String otherDocTypeName) {
					this.otherDocTypeName = otherDocTypeName;
				}
			public String getOtherDocTypeName() {
				return this.otherDocTypeName;
				}
		
			//Поле Серия
			
			public void setPassSeria(String passSeria) {
					this.passSeria = passSeria;
				}
			public String getPassSeria() {
				return this.passSeria;
				}
		
			//Поле Номер
			
			public void setPassNo(String passNo) {
					this.passNo = passNo;
				}
			public String getPassNo() {
				return this.passNo;
				}
		
			//Поле Дата выдачи
			
			public void setPassDate(Date passDate) {
					this.passDate = passDate;
				}
			public Date getPassDate() {
				return this.passDate;
				}
		
			//Поле Кем выдан
			
			public void setPassFrom(String passFrom) {
					this.passFrom = passFrom;
				}
			public String getPassFrom() {
				return this.passFrom;
				}
		
			//Поле <html><i>
	//Внимание! Размещенное ниже поле предназначено для представления вместе с заявлением электронной копии документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Документ, удостоверяющий личность заявителя
			
			public void setIdentityDocLoad(FileBean identityDocLoad) {
					this.identityDocLoad = identityDocLoad;
				}
			public FileBean getIdentityDocLoad() {
				return this.identityDocLoad;
				}
		
			//Поле <h2>Сведения, подтверждающие полномочия опекуна или попечителя</h2>
			
			//Поле <html><i>
	//Внимание! Размещенные ниже поля предназначены для представления вместе с заявлением электронных копий документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Документ, подтверждающий факт установления опеки (попечительства)
			
			public void setDovOpekLoad(FileBean dovOpekLoad) {
					this.dovOpekLoad = dovOpekLoad;
				}
			public FileBean getDovOpekLoad() {
				return this.dovOpekLoad;
				}
		
			//Поле Справка или иной документ, подтверждающий назначение денежных выплат, направленных на содержание опекаемого ребенка, в случаях предусмотренных федеральным законодательством
			
			public void setGuardianDocMoneyLoad(FileBean guardianDocMoneyLoad) {
					this.guardianDocMoneyLoad = guardianDocMoneyLoad;
				}
			public FileBean getGuardianDocMoneyLoad() {
				return this.guardianDocMoneyLoad;
				}
		
	
	//Закладка Сведения о заявителе
		
			//Поле <h2>Сведения об уполномоченном представителе</h2>
			
			//Поле <html><i>
	//Внимание! Размещенные ниже поля предназначены для представления вместе с заявлением электронных копий документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Нотариально заверенная доверенность на совершение действий от имени заявителя
			
			public void setDovDovLoad(FileBean dovDovLoad) {
					this.dovDovLoad = dovDovLoad;
				}
			public FileBean getDovDovLoad() {
				return this.dovDovLoad;
				}
		
			//Поле Документ, удостоверяющий личность уполномоченного представителя
			
			public void setDovPasLoad(FileBean dovPasLoad) {
					this.dovPasLoad = dovPasLoad;
				}
			public FileBean getDovPasLoad() {
				return this.dovPasLoad;
				}
		
			//Поле <h2>Сведения о заявителе</h2>
	/*

			//Поле Фамилия
			
			public void setLastName(String lastName) {
					this.lastName = lastName;
				}
			public String getLastName() {
				return this.lastName;
				}
		
			//Поле Имя
			
			public void setFirstName(String firstName) {
					this.firstName = firstName;
				}
			public String getFirstName() {
				return this.firstName;
				}
		
			//Поле Отчество (если имеется)
			
			public void setMiddleName(String middleName) {
					this.middleName = middleName;
				}
			public String getMiddleName() {
				return this.middleName;
				}
		
			//Поле Заявитель по отношению к ребенку является
			
			public void setApplChild(String applChild) {
					this.applChild = applChild;
				}
			public String getApplChild() {
				return this.applChild;
				}
		
			//Поле Категория заявителя
			
			public void setApplCategory(String applCategory) {
					this.applCategory = applCategory;
				}
			public String getApplCategory() {
				return this.applCategory;
				}
		
			//Поле Дата рождения заявителя
			
			public void setBirthdateAppl(Date birthdateAppl) {
					this.birthdateAppl = birthdateAppl;
				}
			public Date getBirthdateAppl() {
				return this.birthdateAppl;
				}
		
			//Поле Место работы (учебы)
			
			public void setPlaceJob(String placeJob) {
					this.placeJob = placeJob;
				}
			public String getPlaceJob() {
				return this.placeJob;
				}
		
			//Поле Сведения о месте регистрации заявителя
			
			//Поле Индекс
			
			public void setAddressIndex(String addressIndex) {
					this.addressIndex = addressIndex;
				}
			public String getAddressIndex() {
				return this.addressIndex;
				}
		
			//Поле Страна
			
			public void setAddressCountry(String addressCountry) {
					this.addressCountry = addressCountry;
				}
			public String getAddressCountry() {
				return this.addressCountry;
				}
		
			//Поле Ввод адреса
			
			public void setAddressEnterType(String addressEnterType) {
					this.addressEnterType = addressEnterType;
				}
			public String getAddressEnterType() {
				return this.addressEnterType;
				}
		
			//Поле Область (край, республика)
			
			public void setAddressRegion(String addressRegion) {
					this.addressRegion = addressRegion;
				}
			public String getAddressRegion() {
				return this.addressRegion;
				}
		
			//Поле Район
			
			public void setAddressRayon(String addressRayon) {
					this.addressRayon = addressRayon;
				}
			public String getAddressRayon() {
				return this.addressRayon;
				}
		
			//Поле Тип населенного пункта
			
			public void setAddressSettlementType(String addressSettlementType) {
					this.addressSettlementType = addressSettlementType;
				}
			public String getAddressSettlementType() {
				return this.addressSettlementType;
				}
		
			//Поле Город
			
			public void setAddressCity(String addressCity) {
					this.addressCity = addressCity;
				}
			public String getAddressCity() {
				return this.addressCity;
				}
		
			//Поле Населенный пункт
			
			public void setAddressSettlementText(String addressSettlementText) {
					this.addressSettlementText = addressSettlementText;
				}
			public String getAddressSettlementText() {
				return this.addressSettlementText;
				}
		
			//Поле Населенный пункт
			
			public void setAddressSettlementDict(String addressSettlementDict) {
					this.addressSettlementDict = addressSettlementDict;
				}
			public String getAddressSettlementDict() {
				return this.addressSettlementDict;
				}
		
			//Поле Улица
			
			public void setAddressStreetText(String addressStreetText) {
					this.addressStreetText = addressStreetText;
				}
			public String getAddressStreetText() {
				return this.addressStreetText;
				}
		
			//Поле Улица
			
			public void setAddressStreetDict(String addressStreetDict) {
					this.addressStreetDict = addressStreetDict;
				}
			public String getAddressStreetDict() {
				return this.addressStreetDict;
				}
		
			//Поле Дом
			
			public void setAddressHouse(String addressHouse) {
					this.addressHouse = addressHouse;
				}
			public String getAddressHouse() {
				return this.addressHouse;
				}
		
			//Поле Корпус
			
			public void setAddressKorpus(String addressKorpus) {
					this.addressKorpus = addressKorpus;
				}
			public String getAddressKorpus() {
				return this.addressKorpus;
				}
		
			//Поле Квартира
			
			public void setAddressFlat(String addressFlat) {
					this.addressFlat = addressFlat;
				}
			public String getAddressFlat() {
				return this.addressFlat;
				}
		
			//Поле Сведения о месте жительства (пребывания) заявителя
			
			//Поле Индекс
			
			public void setFactAddressIndex(String factAddressIndex) {
					this.factAddressIndex = factAddressIndex;
				}
			public String getFactAddressIndex() {
				return this.factAddressIndex;
				}
		
			//Поле Страна
			
			public void setFactAddressCountry(String factAddressCountry) {
					this.factAddressCountry = factAddressCountry;
				}
			public String getFactAddressCountry() {
				return this.factAddressCountry;
				}
		
			//Поле Ввод адреса
			
			public void setFactAddressEnterType(String factAddressEnterType) {
					this.factAddressEnterType = factAddressEnterType;
				}
			public String getFactAddressEnterType() {
				return this.factAddressEnterType;
				}
		
			//Поле Область (край, республика)
			
			public void setFactAddressRegion(String factAddressRegion) {
					this.factAddressRegion = factAddressRegion;
				}
			public String getFactAddressRegion() {
				return this.factAddressRegion;
				}
		
			//Поле Район
			
			public void setFactAddressRayon(String factAddressRayon) {
					this.factAddressRayon = factAddressRayon;
				}
			public String getFactAddressRayon() {
				return this.factAddressRayon;
				}


		
			//Поле Тип населенного пункта
			
			public void setFactAddressSettlementType(String factAddressSettlementType) {
					this.factAddressSettlementType = factAddressSettlementType;
				}
			public String getFactAddressSettlementType() {
				return this.factAddressSettlementType;
				}
		
			//Поле Город
			
			public void setFactAddressCity(String factAddressCity) {
					this.factAddressCity = factAddressCity;
				}
			public String getFactAddressCity() {
				return this.factAddressCity;
				}
		
			//Поле Населенный пункт
			
			public void setFactAddressSettlementText(String factAddressSettlementText) {
					this.factAddressSettlementText = factAddressSettlementText;
				}
			public String getFactAddressSettlementText() {
				return this.factAddressSettlementText;
				}
		
			//Поле Населенный пункт
			
			public void setFactAddressSettlementDict(String factAddressSettlementDict) {
					this.factAddressSettlementDict = factAddressSettlementDict;
				}
			public String getFactAddressSettlementDict() {
				return this.factAddressSettlementDict;
				}
		
			//Поле Улица
			
			public void setFactAddressStreetText(String factAddressStreetText) {
					this.factAddressStreetText = factAddressStreetText;
				}
			public String getFactAddressStreetText() {
				return this.factAddressStreetText;
				}
		
			//Поле Улица
			
			public void setFactAddressStreetDict(String factAddressStreetDict) {
					this.factAddressStreetDict = factAddressStreetDict;
				}
			public String getFactAddressStreetDict() {
				return this.factAddressStreetDict;
				}
		
			//Поле Дом
			
			public void setFactAddressHouse(String factAddressHouse) {
					this.factAddressHouse = factAddressHouse;
				}
			public String getFactAddressHouse() {
				return this.factAddressHouse;
				}
		
			//Поле Корпус
			
			public void setFactAddressKorpus(String factAddressKorpus) {
					this.factAddressKorpus = factAddressKorpus;
				}
			public String getFactAddressKorpus() {
				return this.factAddressKorpus;
				}
		
			//Поле Квартира
			
			public void setFactAddressFlat(String factAddressFlat) {
					this.factAddressFlat = factAddressFlat;
				}
			public String getFactAddressFlat() {
				return this.factAddressFlat;
				}
		
			//Поле Контактный телефон
			
			public void setPhone(String phone) {
					this.phone = phone;
				}
			public String getPhone() {
				return this.phone;
				}
		
			//Поле Адрес электронной почты
			
			public void setEmail(String email) {
					this.email = email;
				}
			public String getEmail() {
				return this.email;
				}
		
			//Поле <h2>Сведения о документе, удостоверяющем личность заявителя</h2>
			
			//Поле Тип документа, удостоверяющего личность
			
			public void setIdentityDocType(String identityDocType) {
					this.identityDocType = identityDocType;
				}
			public String getIdentityDocType() {
				return this.identityDocType;
				}
		
			//Поле Название иного документа, удостоверяющего личность
			
			public void setOtherDocTypeName(String otherDocTypeName) {
					this.otherDocTypeName = otherDocTypeName;
				}
			public String getOtherDocTypeName() {
				return this.otherDocTypeName;
				}
		
			//Поле Серия
			
			public void setPassSeria(String passSeria) {
					this.passSeria = passSeria;
				}
			public String getPassSeria() {
				return this.passSeria;
				}
		
			//Поле Номер
			
			public void setPassNo(String passNo) {
					this.passNo = passNo;
				}
			public String getPassNo() {
				return this.passNo;
				}
		
			//Поле Дата выдачи
			
			public void setPassDate(Date passDate) {
					this.passDate = passDate;
				}
			public Date getPassDate() {
				return this.passDate;
				}
		
			//Поле Кем выдан
			
			public void setPassFrom(String passFrom) {
					this.passFrom = passFrom;
				}
			public String getPassFrom() {
				return this.passFrom;
				}
		
			//Поле <html><i>
	//Внимание! Размещенное ниже поле предназначено для представления вместе с заявлением электронной копии документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Документ, удостоверяющий личность заявителя
			
			public void setIdentityDocLoad(FileBean identityDocLoad) {
					this.identityDocLoad = identityDocLoad;
				}
			public FileBean getIdentityDocLoad() {
				return this.identityDocLoad;
				}
		
			//Поле <h2>Сведения, подтверждающие полномочия опекуна или попечителя</h2>
			
			//Поле <html><i>
	//Внимание! Размещенные ниже поля предназначены для представления вместе с заявлением электронных копий документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Документ, подтверждающий факт установления опеки (попечительства)
			
			public void setDovOpekLoad(FileBean dovOpekLoad) {
					this.dovOpekLoad = dovOpekLoad;
				}
			public FileBean getDovOpekLoad() {
				return this.dovOpekLoad;
				}
		
			//Поле Справка или иной документ, подтверждающий назначение денежных выплат, направленных на содержание опекаемого ребенка, в случаях предусмотренных федеральным законодательством
			
			public void setGuardianDocMoneyLoad(FileBean guardianDocMoneyLoad) {
					this.guardianDocMoneyLoad = guardianDocMoneyLoad;
				}
			public FileBean getGuardianDocMoneyLoad() {
				return this.guardianDocMoneyLoad;
				}
    */
	
	//Закладка Сведения о лице, нуждающемся в услуге (ребенок)
		
			//Поле <h2>Сведения о лице, нуждающемся в услуге</h2>
			
			//Поле Фамилия
			
			public void setRecipientLastName(String recipientLastName) {
					this.recipientLastName = recipientLastName;
				}
			public String getRecipientLastName() {
				return this.recipientLastName;
				}
		
			//Поле Имя
			
			public void setRecipientFirstName(String recipientFirstName) {
					this.recipientFirstName = recipientFirstName;
				}
			public String getRecipientFirstName() {
				return this.recipientFirstName;
				}
		
			//Поле Отчество (если имеется)
			
			public void setRecipientMiddleName(String recipientMiddleName) {
					this.recipientMiddleName = recipientMiddleName;
				}
			public String getRecipientMiddleName() {
				return this.recipientMiddleName;
				}
		
			//Поле Дата рождения
			
			public void setRecipientBirthDate(Date recipientBirthDate) {
					this.recipientBirthDate = recipientBirthDate;
				}
			public Date getRecipientBirthDate() {
				return this.recipientBirthDate;
				}
		
			//Поле Социальный статус ребенка
			
			public void setRecipientStatus(String recipientStatus) {
					this.recipientStatus = recipientStatus;
				}
			public String getRecipientStatus() {
				return this.recipientStatus;
				}
		
			//Поле <html><i>
	//Внимание! Размещенное ниже поле предназначено для представления вместе с заявлением электронной копии документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Постановление комиссии по делам несовершеннолетних и защите их прав о признании семьи находящейся в социально-опасном положении
			
			public void setRecipientDangerDocLoad(FileBean recipientDangerDocLoad) {
					this.recipientDangerDocLoad = recipientDangerDocLoad;
				}
			public FileBean getRecipientDangerDocLoad() {
				return this.recipientDangerDocLoad;
				}
		
			//Поле Копия извещения о гибели (смерти), пропаже без вести военнослужащего или справка медико-социальной экспертизы об установлении военнослужащему инвалидности в связи с выполнением задач по обеспечению правопорядка и общественной безопасности на территории Северо-Кавказского региона
			
			public void setRecipientWarDocLoad(FileBean recipientWarDocLoad) {
					this.recipientWarDocLoad = recipientWarDocLoad;
				}
			public FileBean getRecipientWarDocLoad() {
				return this.recipientWarDocLoad;
				}
		
			//Поле Выписка из приказа государственного учреждения о нахождении ребенка на полном государственном обеспечении
			
			public void setRecipientProvisionDocLoad(FileBean recipientProvisionDocLoad) {
					this.recipientProvisionDocLoad = recipientProvisionDocLoad;
				}
			public FileBean getRecipientProvisionDocLoad() {
				return this.recipientProvisionDocLoad;
				}
		
			//Поле Справка медико-социальной экспертизы об установлении инвалидности
			
			public void setRecipientInvalidDocLoad(FileBean recipientInvalidDocLoad) {
					this.recipientInvalidDocLoad = recipientInvalidDocLoad;
				}
			public FileBean getRecipientInvalidDocLoad() {
				return this.recipientInvalidDocLoad;
				}
		
			//Поле <h2>Сведения о документе, удостоверяющем личность лица, нуждающегося в услуге</h2>
			
			//Поле Тип документа, удостоверяющего личность
			
			public void setRecipientIdentityDocType(String recipientIdentityDocType) {
					this.recipientIdentityDocType = recipientIdentityDocType;
				}
			public String getRecipientIdentityDocType() {
				return this.recipientIdentityDocType;
				}
		
			//Поле Название иного документа, удостоверяющего личность
			
			public void setRecipientOtherDocTypeName(String recipientOtherDocTypeName) {
					this.recipientOtherDocTypeName = recipientOtherDocTypeName;
				}
			public String getRecipientOtherDocTypeName() {
				return this.recipientOtherDocTypeName;
				}
		
			//Поле Серия
			
			public void setRecipientPassSeria(String recipientPassSeria) {
					this.recipientPassSeria = recipientPassSeria;
				}
			public String getRecipientPassSeria() {
				return this.recipientPassSeria;
				}
		
			//Поле Номер
			
			public void setRecipientPassNo(String recipientPassNo) {
					this.recipientPassNo = recipientPassNo;
				}
			public String getRecipientPassNo() {
				return this.recipientPassNo;
				}
		
			//Поле Дата выдачи
			
			public void setRecipientPassDate(Date recipientPassDate) {
					this.recipientPassDate = recipientPassDate;
				}
			public Date getRecipientPassDate() {
				return this.recipientPassDate;
				}
		
			//Поле Кем выдан
			
			public void setRecipientPassFrom(String recipientPassFrom) {
					this.recipientPassFrom = recipientPassFrom;
				}
			public String getRecipientPassFrom() {
				return this.recipientPassFrom;
				}
		
			//Поле <html><i>
	//Внимание! Размещенное ниже поле предназначено для представления вместе с заявлением электронной копии документа. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Документ, удостоверяющий личность лица, нуждающегося в услуге
			
			public void setRecipientIdentityDocLoad(FileBean recipientIdentityDocLoad) {
					this.recipientIdentityDocLoad = recipientIdentityDocLoad;
				}
			public FileBean getRecipientIdentityDocLoad() {
				return this.recipientIdentityDocLoad;
				}
		
			//Поле Документ, подтверждающий проживание ребенка на территории Саратовской области
	
	//Закладка Сведения о составе семьи
		
			//Поле <h2>Сведения о составе семьи</h2>
			
			//Поле Фамилия

            public void setFamilyLastName(List<String> familyLastName) {
                this.familyLastName = AccessCounterList.decorate(familyLastName, String.class);
            }
            public List<String> getFamilyLastName() {
                return normalize(familyLastName);
            }


		
			//Поле Имя
			

            public void setFamilyFirstName(List<String> familyFirstName) {
                this.familyFirstName = AccessCounterList.decorate(familyFirstName, String.class);
            }
            public List<String> getFamilyFirstName() {
                return normalize(familyFirstName);
            }
		
			//Поле Отчество (если имеется)


            public void setFamilyMiddleName(List<String> familyMiddleName) {
                this.familyMiddleName = AccessCounterList.decorate(familyMiddleName, String.class);
            }
            public List<String> getFamilyMiddleName() {
                return normalize(familyMiddleName);
            }
		
			//Поле Дата рождения


            public void setFamilyBirthDate(List<Date> familyBirthDate) {
                this.familyBirthDate = AccessCounterList.decorate(familyBirthDate, Date.class);
            }
            public List<Date> getFamilyBirthDate() {
                return normalize(familyBirthDate);
            }
		
			//Поле Степень родства по отношению к ребенку

            public void setFamilyStatus(List<String> familyStatus) {
                this.familyStatus = AccessCounterList.decorate(familyStatus, String.class);
            }
            public List<String> getFamilyStatus() {
                return normalize(familyStatus);
            }
		
			//Поле Категория заявителя

            public void setFamilyCategory(List<String> familyCategory) {
                this.familyCategory = AccessCounterList.decorate(familyCategory, String.class);
            }
            public List<String> getFamilyCategory() {
                return normalize(familyCategory);
            }
		
			//Поле Место работы (учебы)

            public void setFamilyPlaceJob(List<String> familyPlaceJob) {
                this.familyPlaceJob = AccessCounterList.decorate(familyPlaceJob, String.class);
            }
            public List<String> getFamilyPlaceJob() {
                return normalize(familyPlaceJob);
            }
		
			//Поле Добавить
			
			//Поле <h2>Сведения о всех видах доходов семьи</h2>
			
			//Поле <html><i>
	//Внимание! Размещенные ниже поля предназначены для представления вместе с заявлением электронных копий документов. 
	//Электронная копия каждого документа  должна представлять собой один файл в формате PDF, DOC, DOCX, XLS, XLSX, JPG, JPEG, PNG, MDI, TIFF, ODT, ODS, содержащий отсканированный графический образ соответствующего бумажного документа, заверенного надлежащим образом и снабженного всеми необходимыми подписями и печатями.
	//</i></html>
			
			//Поле Сведения о всех видах доходов семьи
			
			public void setFamilyRentDocLoad(FileBean familyRentDocLoad) {
					this.familyRentDocLoad = familyRentDocLoad;
				}
			public FileBean getFamilyRentDocLoad() {
				return this.familyRentDocLoad;
				}
		
			//Поле <h2>Документы, предоставляемые Заявителем по собственной инициативе</h2>
			
			//Поле Сведения о размере пенсии
			


            public void setFamilyPensionDocLoad(List<FileBean> familyPensionDocLoad) {
                this.familyPensionDocLoad = AccessCounterList.decorate(familyPensionDocLoad, FileBean.class);
            }
            public List<FileBean> getFamilyPensionDocLoad() {
                return normalize(familyPensionDocLoad);
            }


    //Поле Добавить
			
			//Поле Обязуюсь при извещении меня о наличии путевки (предоставлении места в лагере с дневным пребыванием) предоставить все требуемые документы (доходы всех членов семьи за три предыдущих месяца до момента выдачи путевки)
			
			public void setCommitment(String commitment) {
					this.commitment = commitment;
				}
			public String getCommitment() {
				return this.commitment;
				}
		
	
	//Закладка Дополнительные сведения
		
			//Поле <h2>Дополнительные сведения</h2>
			
			//Поле Выбор цели обращения заявителя
			
			public void setOrganizationRecreation(String organizationRecreation) {
					this.organizationRecreation = organizationRecreation;
				}
			public String getOrganizationRecreation() {
				return this.organizationRecreation;
				}
		
			//Поле Желаемый сезон оздоровления
			
			public void setSeasonRecovery(String seasonRecovery) {
					this.seasonRecovery = seasonRecovery;
				}
			public String getSeasonRecovery() {
				return this.seasonRecovery;
				}
		
			//Поле Наличие земельного участка (га)
			
			public void setLandAvailability(String landAvailability) {
					this.landAvailability = landAvailability;
				}
			public String getLandAvailability() {
				return this.landAvailability;
				}
		
			//Поле Наличие пчелосемей (шт)
			
			public void setBeesAvailability(String beesAvailability) {
					this.beesAvailability = beesAvailability;
				}
			public String getBeesAvailability() {
				return this.beesAvailability;
				}
		
			//Поле Наличие крупного рогатого скота (шт)
			
			public void setLivestockAvailability(String livestockAvailability) {
					this.livestockAvailability = livestockAvailability;
				}
			public String getLivestockAvailability() {
				return this.livestockAvailability;
				}
		
			//Поле Наличие свиней (шт)
			
			public void setPigsAvailability(String pigsAvailability) {
					this.pigsAvailability = pigsAvailability;
				}
			public String getPigsAvailability() {
				return this.pigsAvailability;
				}
		
			//Поле Наличие овец (шт)
			
			public void setSheepAvailability(String sheepAvailability) {
					this.sheepAvailability = sheepAvailability;
				}
			public String getSheepAvailability() {
				return this.sheepAvailability;
				}
		
			//Поле Наличие кур (шт)
			
			public void setChickensAvailability(String chickensAvailability) {
					this.chickensAvailability = chickensAvailability;
				}
			public String getChickensAvailability() {
				return this.chickensAvailability;
				}
		
			//Поле <h2>За три предыдущих месяца до подачи заявления реализовано:</h2>
			
			//Поле Мясо крупного рогатого скота (кг)
			
			public void setLivestockMeat(String livestockMeat) {
					this.livestockMeat = livestockMeat;
				}
			public String getLivestockMeat() {
				return this.livestockMeat;
				}
		
			//Поле Мясо свиней (кг)
			
			public void setPigsMeat(String pigsMeat) {
					this.pigsMeat = pigsMeat;
				}
			public String getPigsMeat() {
				return this.pigsMeat;
				}
		
			//Поле Мясо овец (кг)
			
			public void setSheepMeat(String sheepMeat) {
					this.sheepMeat = sheepMeat;
				}
			public String getSheepMeat() {
				return this.sheepMeat;
				}
		
			//Поле Мясо кур (кг)
			
			public void setChickensMeat(String chickensMeat) {
					this.chickensMeat = chickensMeat;
				}
			public String getChickensMeat() {
				return this.chickensMeat;
				}
		
			//Поле Молока (л)
			
			public void setMilk(String milk) {
					this.milk = milk;
				}
			public String getMilk() {
				return this.milk;
				}
		
			//Поле Меда (кг)
			
			public void setHoney(String honey) {
					this.honey = honey;
				}
			public String getHoney() {
				return this.honey;
				}
		
			//Поле Картофеля (кг)
			
			public void setPotatoes(String potatoes) {
					this.potatoes = potatoes;
				}
			public String getPotatoes() {
				return this.potatoes;
				}
		
			//Поле Яиц куриных (шт)
			
			public void setChickenEggs(String chickenEggs) {
					this.chickenEggs = chickenEggs;
				}
			public String getChickenEggs() {
				return this.chickenEggs;
				}
		
			//Поле <h2>Выбор органа социальной поддержки населения, предоставляющего государственную услугу</h2>
			
			//Поле Орган социальной поддержки населения, предоставляющий государственную услугу
			
			public void setSocialSupport(String socialSupport) {
					this.socialSupport = socialSupport;
				}
			public String getSocialSupport() {
				return this.socialSupport;
				}
		
	
		}
